#BACKEND library
from flask import Flask, jsonify, request, render_template, session, redirect, url_for
import os
import json
from dotenv import load_dotenv
import requests

#GOOGLE libraries
import google.generativeai as genai
from google_auth_oauthlib.flow import Flow


load_dotenv()
app = Flask(__name__)
app.secret_key = os.getenv('flask_secret_key')

with open(os.getenv("google_client_secret_json")) as f:
    client_config = json.load(f)


genai.configure(api_key = os.getenv("gemini_api"))
model = genai.GenerativeModel("gemini-2.0-flash")

system_msg = """SYSTEM MESSAGE:
You are an assistant that extracts structured music data from user input.
Return a JSON object with any of the following fields if available: "artist", "album", "track", "date".

Each field should be a list if multiple values are mentioned, e.g.:
{"artist": ["Karan Aujla", "Shubh"], "track": ["Song1", "Song2"]}

Do not include anything else except the JSON object in your response. There should be no extra symbols or anything.
For example if user prompt says "I want to hear No Love by shubh from Still Rolling released in 2023", then you should only return the way JSON object is present below. ONLY THAT MUCH

{"artist": ["Shubh"], "track": ["No Love"], "album": ["Still Rollin"], "date": ["2023"]}

USER PROMPT:
"""


@app.route('/')
def home():
    return render_template('index.html')



@app.route('/is_logged_in')
def is_logged_in():
    return jsonify({'logged_in': 'credentials' in session})



@app.route('/extract_music_data', methods = ['POST'])
def extract_music_data():
    if 'credentials' not in session:
        return jsonify({'error': 'Not authenticated'}), 401
    
    req_data = request.get_json()
    user_input = req_data.get("prompt", "")
    prompt = system_msg + user_input

    try:
        #Step 1: Call gemini to extract structured music info
        response = model.generate_content(prompt)
        response_text = response.text
        data = json.loads(response_text)

        # Step 2: Create youtube playlist
        access_token = session.get('credentials', {}).get('token')


        # Priority: artist > album > track > fallback
        artist_list = data.get('artist', [])
        album_list = data.get('album', [])
        track_list = data.get('track', [])

        if artist_list:
            playlist_title = f"{artist_list[0]} Playlist"
        elif album_list:
            playlist_title = f"{album_list[0]} Album Playlist"
        elif track_list:
            playlist_title = f"Playlist with {track_list[0]}"
        else:
            playlist_title = "My Music Playlist"
        
        print(f'Playlist Title: {playlist_title}')  #Temporary 

        playlist_id = create_youtube_playlist(access_token, playlist_title)

        if not playlist_id:
            return jsonify({'error': 'Failed to create playlist on Youtube'}), 500
        
        # Step 3: Add playlist ID to response
        data['playlist_id'] = playlist_id

        return jsonify(data)
    
    except json.JSONDecodeError:
        app.logger.error("Gemini returned non-JSON response: %s", response.text)
        return jsonify({"error": "Could not extract structured data. Try a clearer prompt."}), 500
    
    except Exception as e:
        app.logger.exception("Unexpected error during music data extraction: {e}")
        return jsonify({"error": "Internal server error"}), 500






@app.route('/login')
def login():
    flow = Flow.from_client_config(
        client_config,
        scopes = ['https://www.googleapis.com/auth/youtube'],
        redirect_uri = 'https://morphify-delta.vercel.app/oauth2callback'
    )

    authorization_url, state = flow.authorization_url(
        access_type = 'offline',
        include_granted_scopes = 'true'
    )

    print(f'Redirecting to Google Auth: {authorization_url}')  #Temporary
    session['state'] = state
    return redirect(authorization_url)



@app.route('/oauth2callback')
def oauth2callback():
    if 'state' not in session:
        return "Session expired or state not found. Please <a href='/login'>try again</a>.", 400
    state = session['state']

    flow = Flow.from_client_config(
        client_config,
        scopes = ['https://www.googleapis.com/auth/youtube'],
        state = state,
        redirect_uri = 'https://morphify-delta.vercel.app/oauth2callback'
    )

    flow.fetch_token(authorization_response = request.url)

    credentials = flow.credentials

    session['credentials'] = {
        'token': credentials.token,
        'refresh_token': credentials.refresh_token,
        'token_uri': credentials.token_uri,
        'client_id': credentials.client_id,
        'client_secret': credentials.client_secret,
        'scopes': credentials.scopes
    }

    return redirect(url_for('home'))



def create_youtube_playlist(access_token, title, description= "Generated by Playlist Creator"):
    url = 'https://www.googleapis.com/youtube/v3/playlists'

    headers = {
        'Authorization' : f'Bearer {access_token}',
        'Accept' : 'application/json',
        'Content-Type' : 'application/json'
    }

    body = {
        'snippet': {
            'title' : title,
            'description' : description
        },
        'status': {
            'privacyStatus' : 'unlisted'
        }
    }

    response = requests.post(url, headers= headers, json=body)

    if response.status_code == 200:
        playlist_data = response.json()
        return playlist_data['id']             #Return Playlist ID
    else:
        print("Failed to create playlist:", response.text)
        return None


if __name__ == '__main__':
    app.run(debug = True)